use crate::ast::{
    Constant as C,
    Expression as E,
    Operation as O,
};

grammar;

Const: C = {
    r"'[^'\\]'" => C::Character(<>.chars().nth(1).unwrap()),
    r"'\\.'" => C::Character({
        match <>.chars().nth(2) {
            Some('\'') => '\'',
            Some('\\') => '\\',
            Some('r')  => '\r',
            Some('n')  => '\n',
            Some('t')  => '\t',
            Some('0')  => '\0',
            _ => unimplemented!("Unknown escaped character!"),
        }
    }),
    r#""""# => C::String("".to_string()),
    // wrapped in double-quotes
    // any char except double-quotes,
    // or escaped double-quote, repeating.
    // the last character of the string
    // must not be a backslash
    r#""([^"]|([\\]["]))*([^\\]|\\\\)""# => C::String((<>)[1..<>.len()-1].to_string()),
    r"[+-]?\d+" => C::Integer(<>.parse().unwrap()),
    r"[+-]?\d+\.\d+" => C::Float(<>.parse().unwrap()),
    r"IGAZ|igaz" => C::Boolean(true),
    r"HAMIS|hamis" => C::Boolean(false),
};

/// An expression in atomic
/// if it consists of only one part
AtomicExpr: E = {
    Const => E::Const(<>),
    WrappedExpr => <>,
};

// A wrapper converts any expression into an atom
WrappedExpr: E = {
    "(" <Expr> ")" => E::Op(O::Parentheses(Box::new(<>))),
};

/// An expression in unary
/// if it consists of exactly two parts:
/// an operation as prefix and an atomic expression
AtomicOrUnary: E = { AtomicExpr, UnaryExpr };

UnaryExpr: E = {
    // The recommended format is to leave a whitespace after the operation,
    // but the whitespace can be left, if the expression is wrapped.
    r"(NEM|nem)\s" <AtomicOrUnary> => E::Op(O::Not(Box::new(<>))),
    r"(NEM|nem)" <WrappedExpr> => E::Op(O::Not(Box::new(<>))),
    "-" <AtomicOrUnary> => E::Op(O::Neg(Box::new(<>))),
};

// ######## BINARY OPERATIONS ########
//
// The order of execution is determinated by the operations
// Some operations are "stronger" than others.
// The parser will go from the lowest tier to the highest tier.
// An will _fall back_ to the strongest tier.

// In the context of binary operations,
// unary operations can be considered atomic.
Tier0 = { AtomicOrUnary };

Tier1: E = {
    // pushes itself to the right, as most as it is possible
    // and then uses the stack to parse from left-to-right.
    <l:Tier1> "*" <r:Tier0> => E::Op(O::Mul(Box::new(l), Box::new(r))),
    // If possible, converts the lower tier left side into a same tier expression.
    Tier0,
};

Tier2: E = {
    // pushes itself to the right, as most as it is possible
    // and then uses the stack to parse from left-to-right.
    <l:Tier2> "+" <r:Tier1> => E::Op(O::Add(Box::new(l), Box::new(r))),
    // If possible, converts the lower tier left side into a same tier expression.
    Tier1,
};

// The weakest operation will be on the bottom of the stack.
pub Expr: E = Tier2;

pub Input: E = {
    Expr
};
