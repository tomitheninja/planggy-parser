use crate::ast::{
    Constant as C,
    Expression as E,
    Operation as O,
};

grammar;

Const: C = {
    r"'[^'\\]'" => C::Character(<>.chars().nth(1).unwrap()),
    r"'\\.'" => C::Character({
        match <>.chars().nth(2) {
            Some('\'') => '\'',
            Some('\\') => '\\',
            Some('r')  => '\r',
            Some('n')  => '\n',
            Some('t')  => '\t',
            Some('0')  => '\0',
            _ => unimplemented!("Unknown escaped character!"),
        }
    }),
    r#""""# => C::String("".to_string()),
    // wrapped in double-quotes
    // any char except double-quotes,
    // or escaped double-quote, repeating.
    // the last character of the string
    // must not be a backslash
    r#""([^"]|([\\]["]))*([^\\]|\\\\)""# => C::String((<>)[1..<>.len()-1].to_string()),
    r"[+-]?\d+" => C::Integer(<>.parse().unwrap()),
    r"[+-]?\d+\.\d+" => C::Float(<>.parse().unwrap()),
    r"IGAZ|igaz" => C::Boolean(true),
    r"HAMIS|hamis" => C::Boolean(false),
};

SimpleExpr: E = {
    Const => E::Const(<>),
    "(" <Expr> ")" => E::Op(O::Parentheses(Box::new(<>))),
};

pub Expr: E = { SimpleExpr };

pub Input: E = {
    Expr
};
